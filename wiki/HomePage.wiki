=Android Query=

Android-Query (AQuery) is a light-weight library for manipulating UI elements in Android. Our goal is to make Android UI coding simpler, easier, and more fun!

  * See [http://code.google.com/p/android-query/wiki/API API]
  * See [https://market.android.com/details?id=com.pekca.vikispot.android Demo App].
  * See [http://android-query.googlecode.com/svn/trunk/javadoc/com/androidquery/AbstractAQuery.html javadoc]
  * See [http://blog.androidquery.com/ Android Development Blog]
  * Download [http://code.google.com/p/android-query/downloads/list jar]  (~10k), [http://code.google.com/p/android-query/wiki/ReleaseNote Release Notes]
  * [http://groups.google.com/group/android-query Discussion Group]

==Why AQuery? ==
  * [#Less_Code Less Code]
  * [#AJAX_Callback AJAX Callback]
  * [#Chaining Chaining]
  * [#Binding Binding]
  * [#Handle_Fragmentation Handle Fragmentation]
  * [#Multiple_UI,_One_Piece_of_Code Multiple UI, One Piece of Code]
  * [#Extendable Extendable]
  * [#Light_Weight Light Weight]
  * Open Source


===Less Code===

AQuery allows the developer to be more expressive and write-less/do-more. Simpler code is easier to read and maintain.

Compare the length of these pieces of code that does the same thing.

*Before AQuery:*
{{{
public void renderContent(Content content, View view) {
	
	
	ImageView tbView = (ImageView) view.findViewById(R.id.icon); 
	if(tbView != null){
		
		tbView.setImageBitmap(R.drawable.icon);
		tbView.setVisibility(View.VISIBLE);
		
		tbView.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					someMethod(v);
				}
			});
		
	}
	
	TextView nameView = (TextView) view.findViewById(R.id.name);   	
	if(nameView != null){
		nameView.setText(content.getPname());
	}
	
	TextView timeView = (TextView) view.findViewById(R.id.time);  
	
	if(timeView != null){
		long now = System.currentTimeMillis();
		timeView.setText(FormatUtility.relativeTime(now, content.getCreate()));
		timeView.setVisibility(View.VISIBLE);
	}
	
	TextView descView = (TextView) view.findViewById(R.id.desc);   	
	
	if(descView != null){
		descView.setText(content.getDesc());
		descView.setVisibility(View.VISIBLE);
	}
}

}}}

*With AQuery:*
{{{

public void renderContent(Content content, View view) {
	
	AQuery aq = new AQuery(view);
	
	aq.id(R.id.icon).image(R.drawable.icon).visible().clicked(this, "someMethod");	
	aq.id(R.id.name).text(content.getPname());
	aq.id(R.id.time).text(FormatUtility.relativeTime(System.currentTimeMillis(), content.getCreate())).visible();
	aq.id(R.id.desc).text(content.getDesc()).visible();		
	
	
}

}}}



===AJAX Callback===

Asynchronous AJAX or RPC calls are simple.

==== JSON ====
{{{


public void asyncJson(){
	
	//perform a Google search in just a few lines of code
	
	String url = "http://www.google.com/uds/GnewsSearch?q=Obama&v=1.0";
	
	aq.ajax(url, JSONObject.class, new AjaxCallback<JSONObject>() {

		@Override
		public void callback(String url, JSONObject json, AjaxStatus status) {
			Toast.makeText(aq.getContext(), json.toString(), Toast.LENGTH_LONG).show();
		}
	});
	
}

}}}

*HTML*

{{{
public void asyncHtml(){
	
	//fetch Google's homepage in html
	
	String url = "http://www.google.com";
	
	aq.ajax(url, String.class, new AjaxCallback<String>() {

		@Override
		public void callback(String url, String html, AjaxStatus status) {
			
			Toast.makeText(aq.getContext(), html, Toast.LENGTH_LONG).show();
		}
		
	});
	
	
}

}}}

*bytes*

{{{
public void asyncBytes(){
	
	//fetch a remote resource in raw bytes
	
	String url = "http://www.vikispot.com/z/images/vikispot/android-w.png";
	
	aq.ajax(url, byte[].class, new AjaxCallback<byte[]>() {

		@Override
		public void callback(String url, byte[] object, AjaxStatus status) {
			Toast.makeText(aq.getContext(), "bytes array:" + object.length, Toast.LENGTH_LONG).show();
		}
	});
	
	
}
}}}

*Image*

{{{
public void asyncBitmap(){
	
	//fetch a image over the network
	
	String url = "http://www.vikispot.com/z/images/vikispot/android-w.png";
	
	aq.ajax(url, Bitmap.class, new AjaxCallback<Bitmap>() {

		@Override
		public void callback(String url, Bitmap object, AjaxStatus status) {
			Toast.makeText(aq.getContext(), object.toString(), Toast.LENGTH_LONG).show();
		}
	});
	
}
}}}

===Chaining===

All "set" methods in AQuery returns itself. Starts chaining!

{{{
String name = "My name in black text, red background, visible, and invoke nameClicked when clicked";
aq.id(R.id.name).text(name).background(R.color.red).textColor(R.color.black).enabled(true).visible().clicked(this, "nameClicked");
}}}

===Binding===

Tired of creating and registering new listeners? AQuery makes binding listeners to views simple and easy.

{{{
@Override
protected void onCreate(Bundle savedInstanceState){
  	
  	//set content view here...
  	
	AQuery aq = new AQuery(this);	
	
	aq.id(R.id.button).clicked(this, "buttonClicked");
	aq.id(R.id.list).itemClicked(this, "itemClicked")
}

public void buttonClicked(View view){

	//a button is clicked

}

public void itemClicked(AdapterView<?> parent, View v, int pos, long id) {
		
	//list item is clicked
	
}
}}}

===Handle Fragmentation===

Fragmentation is annoying for Android. Features in new API are great, but majority of mobile devices are not updated with the latest API. See [http://developer.android.com/resources/dashboard/platform-versions.html Android Platform Versions Distribution]

AQuery alleviate this issue by dynamically inspecting the Android framework, and make new API features available to code that are compiled for lower API. If the feature is not available, AQuery simply ignores the request.

*Enable hardware acceleration with API 4:*
{{{
@Override
protected void onCreate(Bundle savedInstanceState){
  	
  	//My API level 4 onCreate setup here... 
  	
	AQuery aq = new AQuery(this);	
	
	//Enable hardware acceleration if the device has API 11 or above	
	aq.hardwareAccelerated11();
	
}

}}}

*Enable activity transition animation in API 4:*
{{{
@Override
protected void onCreate(Bundle savedInstanceState){
  	
  	AQuery aq = new AQuery(this);	
	
	//Override activity transition for device with API level 5	
	aq.overridePendingTransition5(R.anim.slide_in_right, R.anim.slide_out_left)
  	
  	//API level 4 onCreate setup here... 
  	
}
}}}

=== Multiple UI, One Piece of Code===

With the waves of new Tablet devices, Android apps will need to support a wider range of screen sizes. Developers might need to design different UI layout for phone and tablets, but do we need to write a different set of code also?

AQuery allows developers to manage different layouts with the same piece of code. If a view is not in a layout, AQuery will just ignore all the operations performed on the view.

{{{
public void renderContent(Content content, View view) {

	//this is a phone!

	//this view exists
	aq.id(R.id.textInMobileLayoutOnly).text("Welcome to my Mobile App!");
	
	//this button exist in tablet layout only, but it's ok!
	//AQuery will ignore all the operations on this view!
	aq.id(R.id.butttonInTabletOnly).text("Open a new tab!");	

}
}}}

Our [https://market.android.com/details?id=com.pekca.vikispot.android demo app] have different layouts for phone and tablet, but underneath it uses the same logic to render the UI.

===Extendable===

Extending AQuery for your need is simple.

{{{

public class MyQuery extends AbstractAQuery<MyQuery>{

	public MyQuery(View view) {
		super(view);
	}

	public MyQuery(Activity act) {
		super(act);
	}
	
	public MyQuery myMethod(String text){
		
		if(view != null){		
			//do something to the view		
		}
		return this;
	}
	
}

}}}

If you like to give back to the community, open a ticket and submit your custom methods! We will add the method to the library if it has no app specific dependency.

===Light Weight===

Memory is scarce for mobile apps. The AQuery lib is standalone and relatively small (~10k for 0.0.1). The actual increase in apk size will be even smaller.

==History==

AQuery is inspired by jQuery, a javascript framework for web, hence the name "Query". 

==Demo App==

Try out our [https://market.android.com/details?id=com.pekca.vikispot.android VikiSpot Reader] written with AQuery.

AQuery is originally written along the way of the development of the VikiSpot Reader. It's now independent and open source.

==Contribute!==

AQuery is a new library and need nourishment from the community. The initial version is only covering a small set (but frequently used) of the Android UI framework. If you have requests or want to contribute code, please open a ticket with the [http://code.google.com/p/android-query/issues/list tracking system].

==Subscribe AQuery News==

New release will be posted here:
  * [http://groups.google.com/group/android-query Android-Query Group]
  * [http://www.facebook.com/pages/Android-Query/205050232863343 Android-Query Facebook Page]

Subscribe to join the AQuery discussion.

==Support==

If you like AQuery's approach to simplify Android development, help us spread the words to other Android developers! 

<wiki:gadget url="http://android-query.googlecode.com/svn/trunk/gadget/facebook6.xml" height="350" width="450" border="0" /> 