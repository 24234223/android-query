#Asynchronous Image Loading with AndroidQuery

== Code ==

Asynchronous image loading is easy with AQuery.

===Simple===
{{{
//load an image to an ImageView from network, cache image to file and memory

aq.id(R.id.image1).image("http://www.vikispot.com/z/images/vikispot/android-w.png");
}}}

===Advance===
{{{

//load an image from network, but only cache with file

//this image is huge, avoid memory caching
boolean memCache = false;
boolean fileCache = true;

aq.id(R.id.image1).image("http://www.vikispot.com/z/images/vikispot/android-w.png", memCache, fileCache);
}}}

===Custom Callback===

{{{
String imageUrl = "http://www.vikispot.com/z/images/vikispot/android-w.png";

final int tint = 0x77AA0000;

aq.id(R.id.image1).image(imageUrl, true, true, new BitmapAjaxCallback(){

	@Override
	public void callback(String url, ImageView iv, Bitmap bm, AjaxStatus status){
				
		iv.setImageBitmap(bm);
		
		//do something to the bitmap
		iv.setColorFilter(tint, PorterDuff.Mode.SRC_ATOP);
		
	}
	
});

}}}

== Configuration ==

More fine tuning can be done when an application starts. A good place to set the configuration is in the onCreate() method of the application.

{{{

public class MainApplication extends Application{

	
	@Override
    public void onCreate() {     
          
        //set the max number of concurrent network connections, default is 4
	AjaxCallback.setNetworkLimit(8);

	//set the max number of icons (image width <= 50) to be cached in memory, default is 20
	BitmapAjaxCallback.setIconCacheLimit(20);

	//set the max number of images (image width > 50) to be cached in memory, default is 20
	BitmapAjaxCallback.setCacheLimit(40);		        
        
        super.onCreate();
    }
	
	
}
}}}

== Maintenance==

AQuery provides few utility functions to help you control ajax and caching behavior.

=== Cancel ===

{{{
public void onDestroy(){
	
	//stop all aync calls when current activity is exiting
	AjaxCallback.cancel();
	
}
}}}


=== Clean Up ===

If you use file cache for images, regularly clean the cache dir when the application exits.

Simple:

{{{
protected void onDestroy(){
	
	super.onDestroy();
	
	//clean the file cache when root activity exit
	//the resulting total cache size will be less than 3M
	AQUtility.cleanCacheAsync(this);
	
}

}}}

Advance:
{{{
protected void onDestroy(){
	
	super.onDestroy();
	
	//clean the file cache with advance option
	long triggerSize = 3000000; //starts cleaning when cache size is larger than 3M
	long targetSize = 2000000;	//remove the least recently used files until cache size is less than 2M
	AQUtility.cleanCacheAsync(this, triggerSize, targetSize);
	
	
}

}}}

=== Low Memory ===

Low memory happens when the device is overloaded with apps. When this happens, we want to remove all images from memory cache.

{{{
public class MainApplication extends Application{

    @Override
    public void onLowMemory(){	

	//clear all memory cached images when system is in low memory
	//note that you can configure the max image cache count, see CONFIGURATION
    	BitmapAjaxCallback.clearCache();
    }
	
}
}}}