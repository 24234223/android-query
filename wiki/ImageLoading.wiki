#Asynchronous Image Loading with AndroidQuery

== Code ==

===Simple===
{{{
//load an image to an ImageView from network, cache image to file and memory

aq.id(R.id.image1).image("http://www.vikispot.com/z/images/vikispot/android-w.png");
}}}

===Advance===
{{{

//load an image from network, but only cache with file

//this image is huge, avoid memory caching
boolean memCache = false;
boolean fileCache = true;

aq.id(R.id.image1).image("http://www.vikispot.com/z/images/vikispot/android-w.png", memCache, fileCache);
}}}


== Configuration ==

More fine tuning can be done when an application starts. A good place to set the configuration is in the onCreate() method of the application.

{{{

public class MainApplication extends Application{

	
	@Override
    public void onCreate() {     
          
        //set the max number of concurrent network connections, default is 4
		AjaxCallback.setNetworkLimit(8);

		//set the max number of icons (image width <= 50) to be cached in memory, default is 20
		BitmapAjaxCallback.setIconCacheLimit(20);

		//set the max number of images (image width > 50) to be cached in memory, default is 20
		BitmapAjaxCallback.setCacheLimit(40);		        
        
        super.onCreate();
    }
	
	
}
}}}

== Operations ==

=== Cancel ===

{{{
public void onDestroy(){
	
	//stop all aync calls when current activity is exiting
	AjaxCallback.cancel();
	
}
}}}

=== Clean Up ===