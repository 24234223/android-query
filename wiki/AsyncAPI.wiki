#summary Asynchronous network calls with Android Query

<wiki:gadget url="http://android-query.googlecode.com/svn/trunk/gadget/social.xml?v=2" height="115" width="700" border="0" /> 

== Code ==

Asynchronous AJAX or RPC calls are simple.

==== Supported Types ====

AQuery transform the data automatically base on the class type passed in the ajax method.

Supported types:
  * JSONObject
  * String (HTML, XML)
  * XmlDom (XML parsing)
  * byte array
  * [http://code.google.com/p/android-query/wiki/ImageLoading Bitmap]

If there are more data types you want to be supported, please send us feedback.

==== JSON ====
{{{


public void asyncJson(){
	
	//perform a Google search in just a few lines of code
	
	String url = "http://www.google.com/uds/GnewsSearch?q=Obama&v=1.0";
	
	aq.ajax(url, JSONObject.class, new AjaxCallback<JSONObject>() {

		@Override
		public void callback(String url, JSONObject json, AjaxStatus status) {
			
			
			if(json != null){
				
				//successful ajax call, show status code and json content
				Toast.makeText(aq.getContext(), status.getCode() + ":" + json.toString(), Toast.LENGTH_LONG).show();
			
			}else{
				
				//ajax error, show error code
				Toast.makeText(aq.getContext(), "Error:" + status.getCode(), Toast.LENGTH_LONG).show();
			}
		}
	});
	
}

}}}

====JSON (activity as callback) ====
{{{
public void asyncJson(){
	
	//perform a Google search in just a few lines of code
	
	String url = "http://www.google.com/uds/GnewsSearch?q=Obama&v=1.0";		
	aq.ajax(url, JSONObject.class, this, "jsonCallback");
	
}

public void jsonCallback(String url, JSONObject json, AjaxStatus status){
	
	if(json != null){		
		//successful ajax call		
	}else{		
		//ajax error
	}
	
}

}}}

Note that AQuery uses a weak reference to hold the handler for this method. This is to make sure an activity won't be memory leaked when it's terminated before the AJAX request finishes.

==== HTML/XML ====

{{{
//fetch Google's homepage in html

String url = "http://www.google.com";

aq.ajax(url, String.class, new AjaxCallback<String>() {

	@Override
	public void callback(String url, String html, AjaxStatus status) {
		
	}
	
});
}}}

==== XML ====

AQuery provide a light weight XML parser called XmlDom. [http://android-query.googlecode.com/svn/trunk/javadoc/index.html?com/androidquery/util/XmlDom.html javadoc] 

XmlDom is a specialized class for simple and easy XML parsing. It's designed to be used in basic Android api 4+ runtime without any dependency.

Example to parse Picasa's featured photos feed:

{{{
public void xml_ajax(){		
	String url = "https://picasaweb.google.com/data/feed/base/featured?max-results=8";		
	aq.ajax(url, XmlDom.class, this, "picasaCb");		
}

public void picasaCb(String url, XmlDom xml, AjaxStatus status){

	List<XmlDom> entries = xml.tags("entry");		
	List<String> titles = new ArrayList<String>();
	
	String imageUrl = null;
	
	for(XmlDom entry: entries){
		titles.add(entry.text("title"));
		imageUrl = entry.tag("content", "type", "image/jpeg").attr("src");
	}
		
	aq.id(R.id.image).image(imageUrl);
	
}

}}}

Related Blog: [http://blog.androidquery.com/2011/09/simpler-and-easier-xml-parsing-in.html XML Parsing]

==== bytes ====

{{{
//fetch a remote resource in raw bytes

String url = "http://www.vikispot.com/z/images/vikispot/android-w.png";

aq.ajax(url, byte[].class, new AjaxCallback<byte[]>() {

	@Override
	public void callback(String url, byte[] object, AjaxStatus status) {
		Toast.makeText(aq.getContext(), "bytes array:" + object.length, Toast.LENGTH_LONG).show();
	}
});
}}}

==== Http POST ====

{{{
public void async_post(){
	
    //do a twiiter search with a http post
	
    String url = "http://search.twitter.com/search.json";
	
    Map<String, Object> params = new HashMap<String, Object>();
    params.put("q", "androidquery");
	
    aq.ajax(url, params, JSONObject.class, new AjaxCallback<JSONObject>() {

        @Override
        public void callback(String url, JSONObject json, AjaxStatus status) {
               
            showResult(json);
           
        }
    });
	
}

}}}

=== Caching ===

Caching is easy with ajax requests. Just pass in an expire time as a parameter, and if the data is available, it will be served from the file cache instead of fetching over the network.

{{{

String url = "http://www.google.com";

//return a cached copy if the data is recently fetched within 15 minutes 
long expire = 15 * 60 * 1000;

aq.ajax(url, String.class, expire, new AjaxCallback<String>() {

    @Override
    public void callback(String url, String html, AjaxStatus status) {        
    	showResult(html);
    }
        
});


}}}

=== Advance ===

The AQuery object provide various commonly used "ajax" methods. For more advanced (but less commonly used) features such as http header and authentication, AjaxCallback can be used directly to customize the requests.

Note: url and type are required parameters.

{{{

String url = "http://www.google.com/uds/GnewsSearch?q=Obama&v=1.0";

AjaxCallback<JSONObject> cb = new AjaxCallback<JSONObject>();        
cb.url(url).type(JSONObject.class).weakHandler(this, "jsonCb").fileCache(true).expire(0);

aq.ajax(cb);

}}}

=== Http Headers ===

Use the header method to configure http request headers.

{{{

String url = "http://www.google.com";

AjaxCallback<String> cb = new AjaxCallback<String>();        
cb.url(url).type(String.class).weakHandler(this, "stringCb");

cb.header("Referer", "http://code.google.com/p/android-query/");
cb.header("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2");

aq.ajax(cb);

}}}

== Maintenance==

AQuery provides few utility functions to help you control ajax and caching behavior.

=== Cancel ===

{{{
public void onDestroy(){
	
	//stop all async calls when current activity is exiting
	AjaxCallback.cancel();
	
}
}}}