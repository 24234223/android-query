#summary Asynchronous network calls with Android Query

<wiki:gadget url="http://android-query.googlecode.com/svn/trunk/gadget/twitter.xml?v=16" height="25" width="450" border="0" /> 

== Code ==

Asynchronous AJAX or RPC calls are simple.

==== Supported Types ====

AQuery transform the data automatically base on the class type passed in the ajax method.

Supported types:
  * JSONObject
  * String (HTML, XML)
  * byte array
  * [http://code.google.com/p/android-query/wiki/ImageLoading Bitmap]

If there are more data types you want to be supported, please send us feedback.

==== JSON ====
{{{


public void asyncJson(){
	
	//perform a Google search in just a few lines of code
	
	String url = "http://www.google.com/uds/GnewsSearch?q=Obama&v=1.0";
	
	aq.ajax(url, JSONObject.class, new AjaxCallback<JSONObject>() {

		@Override
		public void callback(String url, JSONObject json, AjaxStatus status) {
			
			
			if(json != null){
				
				//successful ajax call, show status code and json content
				Toast.makeText(aq.getContext(), status.getCode() + ":" + json.toString(), Toast.LENGTH_LONG).show();
			
			}else{
				
				//ajax error, show error code
				Toast.makeText(aq.getContext(), "Error:" + status.getCode(), Toast.LENGTH_LONG).show();
			}
		}
	});
	
}

}}}

====JSON (activity as callback) ====
{{{
public void asyncJson(){
	
	//perform a Google search in just a few lines of code
	
	String url = "http://www.google.com/uds/GnewsSearch?q=Obama&v=1.0";		
	aq.ajax(url, JSONObject.class, this, "jsonCallback");
	
}

public void jsonCallback(String url, JSONObject json, AjaxStatus status){
	
	if(json != null){		
		//successful ajax call		
	}else{		
		//ajax error
	}
	
}

}}}

Note that AQuery uses a weak reference to hold the handler for this method. This is to make sure an activity won't be memory leaked when it's terminated before the AJAX request finishes.

==== HTML/XML ====

{{{
//fetch Google's homepage in html

String url = "http://www.google.com";

aq.ajax(url, String.class, new AjaxCallback<String>() {

	@Override
	public void callback(String url, String html, AjaxStatus status) {
		
	}
	
});
}}}

==== bytes ====

{{{
//fetch a remote resource in raw bytes

String url = "http://www.vikispot.com/z/images/vikispot/android-w.png";

aq.ajax(url, byte[].class, new AjaxCallback<byte[]>() {

	@Override
	public void callback(String url, byte[] object, AjaxStatus status) {
		Toast.makeText(aq.getContext(), "bytes array:" + object.length, Toast.LENGTH_LONG).show();
	}
});
}}}

==== Http POST ====

{{{
public void async_post(){
	
	//do a twiiter search with a http post
	
    String url = "http://search.twitter.com/search.json";
	
	Map<String, Object> params = new HashMap<String, Object>();
	params.put("q", "androidquery");
	
    aq.ajax(url, params, JSONObject.class, new AjaxCallback<JSONObject>() {

        @Override
        public void callback(String url, JSONObject json, AjaxStatus status) {
               
            showResult(json);
           
        }
    });
	
}

}}}

== Maintenance==

AQuery provides few utility functions to help you control ajax and caching behavior.

=== Cancel ===

{{{
public void onDestroy(){
	
	//stop all async calls when current activity is exiting
	AjaxCallback.cancel();
	
}
}}}